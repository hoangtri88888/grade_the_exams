{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "813c8eef",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import re\n",
    "class the_class:\n",
    "    def __init__(self):\n",
    "        pass\n",
    "\n",
    "    def nhaclai_user(self): \n",
    "        while True:\n",
    "            nhaclai = input(\"Bạn có muốn tiếp tục không (1=yes/0=no)\\n\")\n",
    "            if nhaclai == \"1\" :\n",
    "                return True\n",
    "            else:\n",
    "                return False\n",
    "\n",
    "    def read_class(self): # đọc file\n",
    "        while True:\n",
    "            file_name = input(\"\\n\"+\"Enter a file name :\")\n",
    "            try:\n",
    "                data_input = pd.read_csv(file_name, on_bad_lines=\"skip\",sep=\",\",header=None) # bỏ qua những dòng null\n",
    "                data_input = data_input[0].str.split(',',expand=True) # lấy các mã sinh viên\n",
    "                print(\"Successfully opened\" + file_name +\"\\n\")\n",
    "                # print(data_input.head(5))\n",
    "                self.data_input = data_input\n",
    "                self.file_name = file_name\n",
    "                break\n",
    "            except Exception as e:# in ra ngoại lệ nếu có\n",
    "                print(e)\n",
    "                print(\"Sorry, I can't find this filename\")\n",
    "                xac_nhan = self.nhaclai_user()\n",
    "                if xac_nhan == False:\n",
    "                    print(\"Kết thúc chương trình\")\n",
    "                    break\n",
    "    def ANALYZING(self): # Phân tích các dòng hợp lệ\n",
    "      # file_name = input(\"\\n\"+\"Enter a file name :\")\n",
    "      # self.file_name\n",
    "      df = pd.read_csv(self.file_name, sep=' ' ,header=None) # đưa hết về 1 cột để phân tích\n",
    "      self.df=df\n",
    "      error_vaild_26 = [] # list lỗi không đủ 26 cột\n",
    "      error_vald_N = [] # list lỗi ký tự N# mã sinh viên\n",
    "      for i in range(len(df)):\n",
    "        c = (df[0][i]).split(sep=\",\") # tra từng hàng \n",
    "        if len(c) != 26:\n",
    "          print(\"Invalid line of data: does not contain exactly 26 values: \\n\",df[0][i])\n",
    "          error_vaild_26.append(c)\n",
    "          df.drop(index=[i], inplace=True) # xóa index[i] trong df\n",
    "        if len(c[0]) !=9:\n",
    "          print(\"Invalid line of data: N# is invalid: \\n\", df[0][i])\n",
    "          error_vald_N.append(c)\n",
    "          df.drop(index=[i], inplace=True) \n",
    "        elif len(c[0]) == 9:\n",
    "          regex = re.compile(r'^N(\\d{8})$') # ký tự ^ là bắt đầu một string, sau đó phải đến ký tự \"N\". \\d{8}: định nghĩa nó = 8 ký tự số sau đó.$: kết thúc 1 str \n",
    "          if bool(regex.match(c[0])) == False:\n",
    "            print(\"Invalid line of data: N# is invalid: \\n\", df[0][i])\n",
    "            error_vald_N.append(c)\n",
    "            df.drop(index=[i], inplace=True) \n",
    "      # print(\"lỗi 26 dòng\",error_vaild_26)\n",
    "      # print(\"lỗi N\", error_vald_N)\n",
    "      print(\"\\n**** REPORT ****\\n\")\n",
    "      if len(error_vaild_26) + len(error_vald_N) ==0: \n",
    "        print(\"No errors found!\") \n",
    "      # df.values\n",
    "      print(\"Total valid lines of data: {}\".format(len(df))) # các dòng hợp lệ\n",
    "      print(\"Total invalid lines of data: {}\".format(len(error_vaild_26) + len(error_vald_N))) # các dòng không hợp lệ\n",
    "    def Dap_An(self): # nhập đán án mẫu\n",
    "        while True:\n",
    "            try:\n",
    "                answer_key = input(\"Nhap answer_key, nhap du 25 dap an: \").split(\",\")\n",
    "                self.answer_key = answer_key\n",
    "               \n",
    "                if len(self.answer_key)==25:\n",
    "                    break\n",
    "                else:\n",
    "                    print(\"Nhap dap an khong hop le\") \n",
    "                    if self.nhaclai_user == False:\n",
    "                        print(\" Ket thuc chuong trinh\")\n",
    "                        break\n",
    "            except:\n",
    "                if self.nhaclai_user == False:\n",
    "                    print(\"Ket thuc chuong trinh\")\n",
    "                    break\n",
    "            print(answer_key)\n",
    "    def Check_dap_an(self): # chấm điểm\n",
    "        diem_tong = []\n",
    "        for i in self.df.index.values:\n",
    "            dapan_sinhvien = self.df[0][i].split(sep=\",\") # lấy từng dòng của df\n",
    "            # print(\"1\",dapan_sinhvien)\n",
    "            # print(\"2\",self.answer_key)\n",
    "            score = 0\n",
    "            for j in range(1,26):\n",
    "                    if self.answer_key[j-1] == dapan_sinhvien[j]: # len của đáp án sinh viên = 26, len của đáp án = 25\n",
    "                      score = score + 4\n",
    "                    elif dapan_sinhvien[j] == \"\":\n",
    "                      None\n",
    "                    else:\n",
    "                      score = score - 1\n",
    "\n",
    "            # if score < 0:\n",
    "            #     score = 0\n",
    "            diem_tong.append(score)\n",
    "        # print(self.df)\n",
    "        self.df[\"score\"] = diem_tong # tạo 1 cột bằng điểm đã tính của từng dòng\n",
    "        print(\"Mean (average) score: \", self.df[\"score\"].mean())\n",
    "        print(\"Highest score: \", self.df[\"score\"].max())\n",
    "        print(\"Lowest score: \", self.df[\"score\"].min())\n",
    "        print(\"Range of scores: \", self.df[\"score\"].max()-self.df[\"score\"].min())\n",
    "        print(\"Median score: \", int(self.df[\"score\"].median()))\n",
    "    def export_file(self):\n",
    "      self.df['ma_sv'] = self.df.iloc[:,0].apply (lambda x: x.split (',')[0]) # tạo cột mã sinh viên \n",
    "      file_name2 = self.file_name[:len(self.file_name)-4] + \"_grades.txt\" # tạo tên ghi file\n",
    "      self.df[[\"ma_sv\",\"score\"]].to_csv(file_name2, header=None, index=None, sep=',', mode='a') # tạo file mới từ 2 cột mã sv và điểm \n",
    "\n",
    "# run = the_class()\n",
    "# run.read_class()\n",
    "# run.ANALYZING()\n",
    "# run.Dap_An()\n",
    "# run.Check_dap_an()\n",
    "# run.export_file()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
